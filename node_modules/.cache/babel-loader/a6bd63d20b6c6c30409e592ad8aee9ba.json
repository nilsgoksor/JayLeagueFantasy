{"ast":null,"code":"import _slicedToArray from \"/Users/nilsgoksor/Documents/Programming/React/JayLeagueFantasy/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nilsgoksor/Documents/Programming/React/JayLeagueFantasy/src/containers/Stats.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\nimport Spinner from \"../components/UI/Spinner/Spinner\";\nimport StatsCard from \"../components/UI/StatsCard/StatsCard\";\n\nconst Stats = props => {\n  const dispatch = useDispatch();\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        player = _useState2[0],\n        setPlayer = _useState2[1];\n\n  const _useSelector = useSelector(state => {\n    return state.playerDataReducer;\n  }),\n        error = _useSelector.error,\n        loading = _useSelector.loading,\n        playerStats = _useSelector.playerStats;\n\n  let _useSelector2 = useSelector(state => {\n    return state.leagueDataReducer.error;\n  }),\n      leagueDataError = _useSelector2.leagueDataError;\n\n  const playerInfo = useSelector(state => {\n    return state.leagueDataReducer.playerInfo;\n  });\n  const onGetPlayerData = useCallback(playerIds => {\n    dispatch(actions.getPlayerData(playerIds));\n  }, [dispatch]);\n  const randomPlayer = useCallback(() => {\n    console.log(randomIndex);\n    const randomIndex = Math.floor(Math.random() * Math.floor(playerStats.length));\n    setPlayer(randomIndex);\n  }, [playerStats]);\n  useEffect(() => {\n    if (player === \"\" && playerStats) {\n      randomPlayer();\n    }\n  }, [randomPlayer, player, playerStats]);\n  useEffect(() => {\n    let playerIds = [];\n\n    if (playerInfo) {\n      playerInfo.map(pInfo => {\n        return playerIds.push(pInfo.id);\n      });\n    }\n\n    onGetPlayerData(playerIds);\n  }, [onGetPlayerData, playerInfo]);\n\n  if (playerStats[player] && !loading && !error && !leagueDataError && playerInfo) {\n    const p = playerInfo.find(p => p.id === playerStats[player].player);\n    const name = p ? p.name : \"unknown player\";\n    return React.createElement(StatsCard, {\n      title: playerStats[player].title,\n      player: name,\n      stat: playerStats[player].stat,\n      imgSrc: playerStats[player].imgSrc,\n      onChangeHandler: () => randomPlayer(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    });\n  } else {\n    return loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"access to the fpl api denied\");\n  }\n};\n\nexport default Stats;","map":{"version":3,"sources":["/Users/nilsgoksor/Documents/Programming/React/JayLeagueFantasy/src/containers/Stats.js"],"names":["React","useState","useEffect","useCallback","useDispatch","useSelector","actions","Spinner","StatsCard","Stats","props","dispatch","player","setPlayer","state","playerDataReducer","error","loading","playerStats","leagueDataReducer","leagueDataError","playerInfo","onGetPlayerData","playerIds","getPlayerData","randomPlayer","console","log","randomIndex","Math","floor","random","length","map","pInfo","push","id","p","find","name","title","stat","imgSrc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../store/actions/index\";\nimport Spinner from \"../components/UI/Spinner/Spinner\";\nimport StatsCard from \"../components/UI/StatsCard/StatsCard\";\n\nconst Stats = props => {\n  const dispatch = useDispatch();\n\n  const [player, setPlayer] = useState(\"\");\n\n  const { error, loading, playerStats } = useSelector(state => {\n    return state.playerDataReducer;\n  });\n  let { leagueDataError } = useSelector(state => {\n    return state.leagueDataReducer.error;\n  });\n  const playerInfo = useSelector(state => {\n    return state.leagueDataReducer.playerInfo;\n  });\n\n  const onGetPlayerData = useCallback(\n    playerIds => {\n      dispatch(actions.getPlayerData(playerIds));\n    },\n    [dispatch]\n  );\n\n  const randomPlayer = useCallback(() => {\n    console.log(randomIndex);\n    const randomIndex = Math.floor(\n      Math.random() * Math.floor(playerStats.length)\n    );\n    setPlayer(randomIndex);\n  }, [playerStats]);\n\n  useEffect(() => {\n    if (player === \"\" && playerStats) {\n      randomPlayer();\n    }\n  }, [randomPlayer, player, playerStats]);\n\n  useEffect(() => {\n    let playerIds = [];\n    if (playerInfo) {\n      playerInfo.map(pInfo => {\n        return playerIds.push(pInfo.id);\n      });\n    }\n\n    onGetPlayerData(playerIds);\n  }, [onGetPlayerData, playerInfo]);\n\n  if (\n    playerStats[player] &&\n    !loading &&\n    !error &&\n    !leagueDataError &&\n    playerInfo\n  ) {\n    const p = playerInfo.find(p => p.id === playerStats[player].player);\n    const name = p ? p.name : \"unknown player\";\n    return (\n      <StatsCard\n        title={playerStats[player].title}\n        player={name}\n        stat={playerStats[player].stat}\n        imgSrc={playerStats[player].imgSrc}\n        onChangeHandler={() => randomPlayer()}\n      ></StatsCard>\n    );\n  } else {\n    return loading ? <Spinner /> : <h3>access to the fpl api denied</h3>;\n  }\n};\n\nexport default Stats;\n"]},"metadata":{},"sourceType":"module"}